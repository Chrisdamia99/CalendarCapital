---------------------------------------From CalendarAdapter:------------------------------------------------------------------------------

   private void compareAndGetValuesFromDB(View convertView, LocalTime time) {


        Cursor cursor = myDB.readAllData();


        if (cursor.getCount() == 0) {
            try {


                Toast.makeText(context, "No data to present.", Toast.LENGTH_SHORT).show();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            while (cursor.moveToNext()) {
                if (LocalTime.parse(cursor.getString(4)).equals(time)) {
                    Event eventDB = new Event(cursor.getString(0), cursor.getString(1), cursor.getString(2),
                            CalendarUtils.stringToLocalDate(cursor.getString(3)), LocalTime.parse(cursor.getString(4)));
                    ArrayList<Event> eventArrayDB = new ArrayList<>();
                    eventArrayDB.add(eventDB);
                    HourEvent event = new HourEvent(LocalTime.parse(cursor.getString(4)), eventArrayDB);
                    event.setEvents(eventArrayDB);
                    event.setTime(LocalTime.parse(cursor.getString(4)));
                    //Καλείτε η setHour και δίνω στην λίστα τις τιμές της ώρες από την βάση δεδομένων και το αντίστοιχο event


                }

            }
        }


    }


---------------------------------------From AlarmReceiver:------------------------------------------------------------------------------

//        now = (LocalDateTime) b.get("calendar");
//        Instant instant2 = Instant.from(now.atZone(ZoneId.of("Europe/Athens")));
//        Date date = Date.from(instant2);
//        Calendar calendar = Calendar.getInstance();
//        calendar.setTime(date);


//                final Handler handler = new Handler();
//                handler.postDelayed(new Runnable() {
//                    @Override
//                    public void run() {
//                        if (r.isPlaying())
//                            r.stop();
//                    }
//                }, 500 * 10);

---------------------------------------From EventEdit:------------------------------------------------------------------------------
//        TimeZone tz = calendar.getTimeZone();
//        ZoneId zoneId = tz.toZoneId();
//        LocalDateTime localDateTime = LocalDateTime.ofInstant(calendar.toInstant(), zoneId);
//        LocalDateTime ld = calendar.;



//        findViewById(R.id.menu_new_add_edit).setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                PopupMenu popupMenu = new PopupMenu(getApplicationContext(), v);
//                popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
//                    public boolean onMenuItemClick(MenuItem item) {
//
//                        switch (item.getItemId()) {
//                            case R.id.refreshItemOnLay:
//                                AllEventsList.reloadActivity(EventEdit.this);
//                                return true;
//                            case R.id.previousAct:
//
//                                Intent i = new Intent(EventEdit.this, MainActivity.class);
//                                Boolean myBool = true;
//                                i.putExtra("bool", myBool);
//
//                                startActivity(i);
//
//                        }
//
//                        return false;
//                    }
//                });
//                popupMenu.inflate(R.menu.menu_up_inlayout);
//                popupMenu.show();
//            }
//        });


-------------------Loop for repeat----------------
         if (cursor.getString(6).equals("1"))
                        {
                            for (int j=0; j<days.size(); j++)
                            {
                                if (days.get(j).equals(date)) {
                                    holder.eventRepeatText1.setVisibility(View.VISIBLE);
                                    holder.eventRepeatText1.setText(myEvents.get(0).getName());
                                }
                            }
                        }
                        if (cursor.getString(6).equals("2"))
                        {

                                if (days.get(i).equals(date)) {
                                    for (int j=0; j<days.size(); j=j+6) {
                                        holder.eventRepeatText2.setVisibility(View.VISIBLE);
                                        holder.eventRepeatText2.setText(myEvents.get(0).getName());
                                    }
                                }

                        }

//------------------------EVENT CURSOR ADAPTER------------------------------
//    private void startAlarm(int alarmId, Calendar c, String title, String comment) {
//        MyDatabaseHelper myDB = new MyDatabaseHelper(mContext);
//        Cursor cursor = myDB.readAllEvents();
//        while (cursor.moveToNext()) {
//            if (cursor.getString(0).equals(String.valueOf(alarmId))) {
//                if (cursor.getString(6).equals("0")){
//                myDB.updateData(cursor.getString(0), cursor.getString(1), cursor.getString(2), LocalDate.parse(cursor.getString(3)),
//                        LocalTime.parse(cursor.getString(4)), "true","0");
//        }else if (cursor.getString(6).equals("1"))
//                {
//                    myDB.updateData(cursor.getString(0), cursor.getString(1), cursor.getString(2), LocalDate.parse(cursor.getString(3)),
//                            LocalTime.parse(cursor.getString(4)), "true","1");
//                }
//
//
//            }
//        }
//        AlarmManager alarmManager = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);
//        Intent intent = new Intent(mContext, AlarmReceiver.class);
//
////        intent.putExtra("calendar", c.getTime());
//        intent.putExtra("title", title);
//        intent.putExtra("comment", comment);
//
//
//        PendingIntent pendingIntent = PendingIntent.getBroadcast(mContext, alarmId, intent, PendingIntent.FLAG_CANCEL_CURRENT);
//
//        alarmManager.setExact(AlarmManager.RTC_WAKEUP, c.getTimeInMillis(), pendingIntent);
//        notifyDataSetChanged();
//
//    }

//
//    private void cancelAlarmCursorAdapter(int alarmId) {
//        MyDatabaseHelper myDB = new MyDatabaseHelper(mContext);
//        Cursor cursor = myDB.readAllEvents();
//        cursor.moveToPosition(-1);
//        Calendar DBdate;
//        while (cursor.moveToNext()) {
//            if (cursor.getString(0).equals(String.valueOf(alarmId))) {
//                if (cursor.getString(6).equals("0")){
//                    myDB.updateData(cursor.getString(0), cursor.getString(1), cursor.getString(2), LocalDate.parse(cursor.getString(3)),
//                            LocalTime.parse(cursor.getString(4)), "false","0");
//                }else if (cursor.getString(6).equals("1"))
//                {
//                    myDB.updateData(cursor.getString(0), cursor.getString(1), cursor.getString(2), LocalDate.parse(cursor.getString(3)),
//                            LocalTime.parse(cursor.getString(4)), "false","1");
//                }
//
//            }
//        }
//
//
//        AlarmManager alarmManager = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);
//        Intent intent = new Intent(mContext, AlarmReceiver.class);
//        PendingIntent pendingIntent = PendingIntent.getBroadcast(mContext, alarmId, intent, 0);
//        Toast.makeText(mContext, "Alarm Cancelled", Toast.LENGTH_SHORT).show();
//
//
//        alarmManager.cancel(pendingIntent);
//        notifyDataSetChanged();
//    }

//------------------------------------ALARM RECEIVER HANDLER TO STOP AFTER 10SEC---------------------------

//        new Handler().postDelayed(new Runnable() {
//            @Override
//            public void run() {
//                if (!isNotificationDeleted) {
//                    stopRingtone();
//                }
//            }
//        }, 1000);


//    public void stopRingtone() {
//        if (r != null && r.isPlaying()) {
//            r.stop();
//        }
//        if (vibrator != null) {
//            vibrator.cancel();
//        }
//    }
//
//
//    public void onNotificationDeleted(Context context, int notificationId, int reason) {
//        isNotificationDeleted = true;
//        stopRingtone();
//    }


//-----------------------------FROM MAIN ACTIVITY-------------------------------------------------------------

  private void editIfRepeating(AlertDialog builderRepeating, int position, TextView editAll, TextView editOne,TextView editFuture)
    {
        builderRepeating.setOnShowListener(new DialogInterface.OnShowListener() {
            @Override
            public void onShow(DialogInterface dialog) {
                editAll.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        String parent_id = hourAdapter.getItem(position).getEvents().get(0).getParent_id();
                        String row_id = hourAdapter.getItem(position).getEvents().get(0).getId();
                        ArrayList<String> editAllArray = new ArrayList<>();
                        Cursor cursorEvent = myDB.readAllEvents();
                        Cursor remCursor = myDB.readAllReminder();




                        hourAdapter.notifyDataSetChanged();

                        if (parent_id==null)
                        {
                            cursorEvent.moveToPosition(-1);
                            while(cursorEvent.moveToNext())
                            {
                                if (cursorEvent.getString(0).equals(row_id) || (!(cursorEvent.getString(7)==null) &&cursorEvent.getString(7).equals(row_id)))
                                {
                                    editAllArray.add(cursorEvent.getString(0));
                                }
                            }
                            editAllArray.size();


                        }else {

                            cursorEvent.moveToPosition(-1);
                            while (cursorEvent.moveToNext())
                            {
                                if (cursorEvent.getString(0).equals(parent_id) || (!(cursorEvent.getString(7)==null) && cursorEvent.getString(7).equals(parent_id)))
                                {
                                    editAllArray.add(cursorEvent.getString(0));
                                }
                            }
                            editAllArray.size();

                        }
                        editAllArray.size();
                        Intent i = new Intent(MainActivity.this, Edit_Update_Activity.class);
                        i.putExtra("id",row_id);
                        i.putExtra("edit_array",editAllArray);

                        startActivity(i);
                        cursorEvent.close();
                        remCursor.close();
                        myDB.close();




                        String previousViewType = stack.peekFirst();
                        if (previousViewType.equals("all")) {
                            setAllEvents();
                        } else if (previousViewType.equals("double-click-week")) {
                            setDaily();
                        } else if (previousViewType.equals("month")) {
                            setDaily();
                        } else if (previousViewType.equals("double-click-month")) {
                            setDaily();
                        } else if (previousViewType.equals("week")) {
                            setWeek();
                        } else if (previousViewType.equals("daily")) {
                            setDaily();
                        } else {
                            onMyBackPressed();
                        }
                        dialog.dismiss();
                    }
                });

                editFuture.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        String parent_id = hourAdapter.getItem(position).getEvents().get(0).getParent_id();
                        String row_id = hourAdapter.getItem(position).getEvents().get(0).getId();
                        LocalDate event_date = hourAdapter.getItem(position).getEvents().get(0).getDate();

                        ArrayList<String> editAllArray = new ArrayList<>();
                        Cursor cursorEvent = myDB.readAllEvents();

                        Cursor eventCursor = myDB.readAllEvents();
                        Cursor remCursor = myDB.readAllReminder();

                        if (parent_id==null)
                        {
                            cursorEvent.moveToPosition(-1);
                            while(cursorEvent.moveToNext())
                            {
                                if (cursorEvent.getString(0).equals(row_id) || (!(cursorEvent.getString(7) == null) &&cursorEvent.getString(7).equals(row_id)))
                                {
                                    editAllArray.add(cursorEvent.getString(0));
                                }
                            }
                            editAllArray.size();

                        }else {

                            cursorEvent.moveToPosition(-1);
                            while(cursorEvent.moveToNext()) {
                                LocalDate cursorLocalDate = stringToLocalDate(cursorEvent.getString(3));
                                String cursorParentID = cursorEvent.getString(7);
                                int comparisonLocalDates = event_date.compareTo(cursorLocalDate);
                                if (!(cursorParentID == null) && cursorParentID.equals(parent_id)) {

                                    if (comparisonLocalDates < 0 || event_date.equals(cursorLocalDate)) {
                                        editAllArray.add(cursorEvent.getString(0));

                                    }
                                }
                            }
                            editAllArray.size();

                        }
                        editAllArray.size();
                        Intent i = new Intent(MainActivity.this, Edit_Update_Activity.class);
                        i.putExtra("id",row_id);
                        i.putExtra("edit_array",editAllArray);

                        startActivity(i);

                        hourAdapter.notifyDataSetChanged();

                        eventCursor.close();
                        remCursor.close();
                        myDB.close();

                        String previousViewType = stack.peekFirst();
                        if (previousViewType.equals("all")) {
                            setAllEvents();
                        } else if (previousViewType.equals("double-click-week")) {
                            setDaily();
                        } else if (previousViewType.equals("month")) {
                            setDaily();
                        } else if (previousViewType.equals("double-click-month")) {
                            setDaily();
                        } else if (previousViewType.equals("week")) {
                            setWeek();
                        } else if (previousViewType.equals("daily")) {
                            setDaily();
                        } else {
                            onMyBackPressed();
                        }
                        dialog.dismiss();
                    }
                });

                editOne.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        String row_id = hourAdapter.getItem(position).getEvents().get(0).getId();

                        Intent i = new Intent(MainActivity.this, Edit_Update_Activity.class);


                        Cursor cursorEvent = myDB.readAllEvents();
                        Cursor remCursor = myDB.readAllReminder();


                        i.putExtra("id", row_id);

                        startActivity(i);




                        cursorEvent.close();
                        remCursor.close();
                        myDB.close();

                        String previousViewType = stack.peekFirst();
                        if (previousViewType.equals("all")) {
                            setAllEvents();
                        } else if (previousViewType.equals("double-click-week")) {
                            setDaily();
                        } else if (previousViewType.equals("month")) {
                            setDaily();
                        } else if (previousViewType.equals("double-click-month")) {
                            setDaily();
                        } else if (previousViewType.equals("week")) {
                            setWeek();
                        } else if (previousViewType.equals("daily")) {
                            setDaily();
                        } else {
                            onMyBackPressed();
                        }
                        dialog.dismiss();
                    }
                });
            }
        });
    }