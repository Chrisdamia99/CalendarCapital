    private List<Event> listDataHeaderEvent()
    {
        listDataHeader = new ArrayList<>();
        listDataChild = new HashMap<>();

        String selectQuery = "SELECT * FROM " + MyDatabaseHelper.TABLE_NAME;
        Cursor cursor = db.rawQuery(selectQuery, null);

        if (cursor.moveToFirst()) {
            do {
                @SuppressLint("Range") String id = String.valueOf(cursor.getLong(cursor.getColumnIndex(MyDatabaseHelper.COLUMN_ID)));
                @SuppressLint("Range") String title = cursor.getString(cursor.getColumnIndex(MyDatabaseHelper.COLUMN_TITLE));
                @SuppressLint("Range") String comment = cursor.getString(cursor.getColumnIndex(MyDatabaseHelper.COLUMN_COMMENT));
                @SuppressLint("Range") LocalDate date = CalendarUtils.stringToLocalDate(cursor.getString(cursor.getColumnIndex(MyDatabaseHelper.COLUMN_DATE)));
                @SuppressLint("Range") LocalTime time = LocalTime.parse(cursor.getString(cursor.getColumnIndex(MyDatabaseHelper.COLUMN_TIME)));
                @SuppressLint("Range") String alarm = String.valueOf(cursor.getInt(cursor.getColumnIndex(MyDatabaseHelper.COLUMN_ALARM)));
                @SuppressLint("Range") String parentId = String.valueOf(cursor.getLong(cursor.getColumnIndex(MyDatabaseHelper.COLUMN_PARENT_ID)));

                Event event = new Event(id, title, comment, date, time, alarm, parentId);

                if (parentId.equals("0")) {
                    listDataHeader.add(event);
                } else {
                    for (Event parent : listDataHeader) {
                        if (Objects.equals(parent.getId(), parentId)) {
                            List<Event> childList = listDataChild.get(parent);
                            if (childList == null) {
                                childList = new ArrayList<>();
                                listDataChild.put(parent, childList);
                            }
                            childList.add(event);
                        }
                    }
                }
            } while (cursor.moveToNext());
        }

        cursor.close();

        return listDataHeader;
    }

    private HashMap<Event, List<Event>> listDataChildEvent()
    {    listDataHeader = new ArrayList<>();
        listDataChild = new HashMap<>();

        String selectQuery = "SELECT * FROM " + MyDatabaseHelper.TABLE_NAME;
        Cursor cursor = db.rawQuery(selectQuery, null);

        if (cursor.moveToFirst()) {
            do {
                @SuppressLint("Range") String id = String.valueOf(cursor.getLong(cursor.getColumnIndex(MyDatabaseHelper.COLUMN_ID)));
                @SuppressLint("Range") String title = cursor.getString(cursor.getColumnIndex(MyDatabaseHelper.COLUMN_TITLE));
                @SuppressLint("Range") String comment = cursor.getString(cursor.getColumnIndex(MyDatabaseHelper.COLUMN_COMMENT));
                @SuppressLint("Range") LocalDate date = CalendarUtils.stringToLocalDate(cursor.getString(cursor.getColumnIndex(MyDatabaseHelper.COLUMN_DATE)));
                @SuppressLint("Range") LocalTime time = LocalTime.parse(cursor.getString(cursor.getColumnIndex(MyDatabaseHelper.COLUMN_TIME)));
                @SuppressLint("Range") String alarm = String.valueOf(cursor.getInt(cursor.getColumnIndex(MyDatabaseHelper.COLUMN_ALARM)));
                @SuppressLint("Range") String parentId = String.valueOf(cursor.getLong(cursor.getColumnIndex(MyDatabaseHelper.COLUMN_PARENT_ID)));

                Event event = new Event(id, title, comment, date, time, alarm, parentId);

                if (parentId.equals("0")) {
                    listDataHeader.add(event);
                } else {
                    for (Event parent : listDataHeader) {
                        if (Objects.equals(parent.getId(), parentId)) {
                            List<Event> childList = listDataChild.get(parent);
                            if (childList == null) {
                                childList = new ArrayList<>();
                                listDataChild.put(parent, childList);
                            }
                            childList.add(event);
                        }
                    }
                }
            } while (cursor.moveToNext());
        }

        cursor.close();


        return listDataChild;
    }

        private void compareAndGetParentEvents(String id) {
            MyDatabaseHelper myDB = new MyDatabaseHelper(mContext);
            Cursor cursor = myDB.readAllEvents();
            ArrayList<Event> eventArrayDB = new ArrayList<>();


            if (cursor.getCount() == 0) {
                try {


                    Toast.makeText(mContext, "No data to present.", Toast.LENGTH_SHORT).show();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                while (cursor.moveToNext()) {

                    if (cursor.getString(0).equals(id) && cursor.getString(7) == null) {
                        Event eventDB = new Event(cursor.getString(0), cursor.getString(1), cursor.getString(2),
                                CalendarUtils.stringToLocalDate(cursor.getString(3)), LocalTime.parse(cursor.getString(4)),
                                cursor.getString(5), cursor.getString(6),cursor.getString(7));


                        LocalTime cursorTime = LocalTime.parse(cursor.getString(4));

                        String cursorId = cursor.getString(0);
                        eventArrayDB.add(eventDB);

                        HourEvent event = new HourEvent(cursorTime, eventArrayDB, cursorId);

                        event.setEvents(eventArrayDB);
                        event.setTime(cursorTime);


                    }

                }
            }

            cursor.close();
            myDB.close();

        }

        private void compareAndGetChildren(String id,String parent_id) {
            MyDatabaseHelper myDB = new MyDatabaseHelper(mContext);
            Cursor cursor = myDB.readAllEvents();
            ArrayList<Event> eventArrayDB = new ArrayList<>();

            if (cursor.getCount() == 0) {
                try {


                    Toast.makeText(mContext, "No data to present.", Toast.LENGTH_SHORT).show();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                while (cursor.moveToNext()) {

                    if (cursor.getString(0).equals(id) && cursor.getString(7).equals(parent_id)) {
                        Event eventDB = new Event(cursor.getString(0), cursor.getString(1), cursor.getString(2),
                                CalendarUtils.stringToLocalDate(cursor.getString(3)), LocalTime.parse(cursor.getString(4)),
                                cursor.getString(5), cursor.getString(6),cursor.getString(7));



                        LocalTime cursorTime = LocalTime.parse(cursor.getString(4));

                        String cursorId = cursor.getString(0);
                        eventArrayDB.add(eventDB);

                        HourEvent event = new HourEvent(cursorTime, eventArrayDB, cursorId);

                        event.setEvents(eventArrayDB);
                        event.setTime(cursorTime);


                    }

                }
            }

            cursor.close();
            myDB.close();


        }